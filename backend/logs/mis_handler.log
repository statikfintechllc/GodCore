ggml_cuda_init: GGML_CUDA_FORCE_MMQ:    no
ggml_cuda_init: GGML_CUDA_FORCE_CUBLAS: no
ggml_cuda_init: found 2 CUDA devices:
  Device 0: NVIDIA GeForce RTX 3060, compute capability 8.6, VMM: yes
  Device 1: NVIDIA GeForce RTX 3060, compute capability 8.6, VMM: yes
llama_model_load_from_file_impl: using device CUDA0 (NVIDIA GeForce RTX 3060) - 11172 MiB free
llama_model_load_from_file_impl: using device CUDA1 (NVIDIA GeForce RTX 3060) - 11922 MiB free
llama_model_loader: loaded meta data with 22 key-value pairs and 363 tensors from /home/statiksmoke8/AscendNet/godcore/models/Mistral-13B-Instruct/mistral-13b-instruct-v0.1.Q5_K_M.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = llama
llama_model_loader: - kv   1:                               general.name str              = LLaMA v2
llama_model_loader: - kv   2:                       llama.context_length u32              = 4096
llama_model_loader: - kv   3:                     llama.embedding_length u32              = 5120
llama_model_loader: - kv   4:                          llama.block_count u32              = 40
llama_model_loader: - kv   5:                  llama.feed_forward_length u32              = 13824
llama_model_loader: - kv   6:                 llama.rope.dimension_count u32              = 128
llama_model_loader: - kv   7:                 llama.attention.head_count u32              = 40
llama_model_loader: - kv   8:              llama.attention.head_count_kv u32              = 40
llama_model_loader: - kv   9:     llama.attention.layer_norm_rms_epsilon f32              = 0.000010
llama_model_loader: - kv  10:                          general.file_type u32              = 17
llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,32000]   = ["<unk>", "<s>", "</s>", "<0x00>", "<...
llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,32000]   = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,32000]   = [2, 3, 3, 6, 6, 6, 6, 6, 6, 6, 6, 6, ...
llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 1
llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 2
llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 0
llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  21:               general.quantization_version u32              = 2
llama_model_loader: - type  f32:   81 tensors
llama_model_loader: - type q5_K:  241 tensors
llama_model_loader: - type q6_K:   41 tensors
print_info: file format = GGUF V3 (latest)
print_info: file type   = Q5_K - Medium
print_info: file size   = 8.60 GiB (5.67 BPW) 
init_tokenizer: initializing tokenizer for type 1
load: control token:      2 '</s>' is not marked as EOG
load: control token:      1 '<s>' is not marked as EOG
load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
load: special tokens cache size = 3
load: token to piece cache size = 0.1684 MB
print_info: arch             = llama
print_info: vocab_only       = 0
print_info: n_ctx_train      = 4096
print_info: n_embd           = 5120
print_info: n_layer          = 40
print_info: n_head           = 40
print_info: n_head_kv        = 40
print_info: n_rot            = 128
print_info: n_swa            = 0
print_info: n_swa_pattern    = 1
print_info: n_embd_head_k    = 128
print_info: n_embd_head_v    = 128
print_info: n_gqa            = 1
print_info: n_embd_k_gqa     = 5120
print_info: n_embd_v_gqa     = 5120
print_info: f_norm_eps       = 0.0e+00
print_info: f_norm_rms_eps   = 1.0e-05
print_info: f_clamp_kqv      = 0.0e+00
print_info: f_max_alibi_bias = 0.0e+00
print_info: f_logit_scale    = 0.0e+00
print_info: f_attn_scale     = 0.0e+00
print_info: n_ff             = 13824
print_info: n_expert         = 0
print_info: n_expert_used    = 0
print_info: causal attn      = 1
print_info: pooling type     = 0
print_info: rope type        = 0
print_info: rope scaling     = linear
print_info: freq_base_train  = 10000.0
print_info: freq_scale_train = 1
print_info: n_ctx_orig_yarn  = 4096
print_info: rope_finetuned   = unknown
print_info: ssm_d_conv       = 0
print_info: ssm_d_inner      = 0
print_info: ssm_d_state      = 0
print_info: ssm_dt_rank      = 0
print_info: ssm_dt_b_c_rms   = 0
print_info: model type       = 13B
print_info: model params     = 13.02 B
print_info: general.name     = LLaMA v2
print_info: vocab type       = SPM
print_info: n_vocab          = 32000
print_info: n_merges         = 0
print_info: BOS token        = 1 '<s>'
print_info: EOS token        = 2 '</s>'
print_info: UNK token        = 0 '<unk>'
print_info: PAD token        = 0 '<unk>'
print_info: LF token         = 13 '<0x0A>'
print_info: EOG token        = 2 '</s>'
print_info: max token length = 48
load_tensors: loading model tensors, this can take a while... (mmap = true)
load_tensors: layer   0 assigned to device CPU, is_swa = 0
load_tensors: layer   1 assigned to device CPU, is_swa = 0
load_tensors: layer   2 assigned to device CPU, is_swa = 0
load_tensors: layer   3 assigned to device CPU, is_swa = 0
load_tensors: layer   4 assigned to device CPU, is_swa = 0
load_tensors: layer   5 assigned to device CUDA0, is_swa = 0
load_tensors: layer   6 assigned to device CUDA0, is_swa = 0
load_tensors: layer   7 assigned to device CUDA0, is_swa = 0
load_tensors: layer   8 assigned to device CUDA0, is_swa = 0
load_tensors: layer   9 assigned to device CUDA0, is_swa = 0
load_tensors: layer  10 assigned to device CUDA0, is_swa = 0
load_tensors: layer  11 assigned to device CUDA0, is_swa = 0
load_tensors: layer  12 assigned to device CUDA0, is_swa = 0
load_tensors: layer  13 assigned to device CUDA0, is_swa = 0
load_tensors: layer  14 assigned to device CUDA0, is_swa = 0
load_tensors: layer  15 assigned to device CUDA0, is_swa = 0
load_tensors: layer  16 assigned to device CUDA0, is_swa = 0
load_tensors: layer  17 assigned to device CUDA0, is_swa = 0
load_tensors: layer  18 assigned to device CUDA0, is_swa = 0
load_tensors: layer  19 assigned to device CUDA0, is_swa = 0
load_tensors: layer  20 assigned to device CUDA0, is_swa = 0
load_tensors: layer  21 assigned to device CUDA0, is_swa = 0
load_tensors: layer  22 assigned to device CUDA1, is_swa = 0
load_tensors: layer  23 assigned to device CUDA1, is_swa = 0
load_tensors: layer  24 assigned to device CUDA1, is_swa = 0
load_tensors: layer  25 assigned to device CUDA1, is_swa = 0
load_tensors: layer  26 assigned to device CUDA1, is_swa = 0
load_tensors: layer  27 assigned to device CUDA1, is_swa = 0
load_tensors: layer  28 assigned to device CUDA1, is_swa = 0
load_tensors: layer  29 assigned to device CUDA1, is_swa = 0
load_tensors: layer  30 assigned to device CUDA1, is_swa = 0
load_tensors: layer  31 assigned to device CUDA1, is_swa = 0
load_tensors: layer  32 assigned to device CUDA1, is_swa = 0
load_tensors: layer  33 assigned to device CUDA1, is_swa = 0
load_tensors: layer  34 assigned to device CUDA1, is_swa = 0
load_tensors: layer  35 assigned to device CUDA1, is_swa = 0
load_tensors: layer  36 assigned to device CUDA1, is_swa = 0
load_tensors: layer  37 assigned to device CUDA1, is_swa = 0
load_tensors: layer  38 assigned to device CUDA1, is_swa = 0
load_tensors: layer  39 assigned to device CUDA1, is_swa = 0
load_tensors: layer  40 assigned to device CPU, is_swa = 0
load_tensors: tensor 'token_embd.weight' (q5_K) (and 47 others) cannot be used with preferred buffer type CUDA_Host, using CPU instead
load_tensors: offloading 35 repeating layers to GPU
load_tensors: offloaded 35/41 layers to GPU
load_tensors:        CUDA0 model buffer size =  3597.56 MiB
load_tensors:        CUDA1 model buffer size =  3866.99 MiB
load_tensors:   CPU_Mapped model buffer size =  8801.63 MiB
...................................................................................................
llama_context: constructing llama_context
llama_context: n_seq_max     = 1
llama_context: n_ctx         = 4096
llama_context: n_ctx_per_seq = 4096
llama_context: n_batch       = 512
llama_context: n_ubatch      = 512
llama_context: causal_attn   = 1
llama_context: flash_attn    = 0
llama_context: freq_base     = 10000.0
llama_context: freq_scale    = 1
set_abort_callback: call
llama_context:        CPU  output buffer size =     0.12 MiB
llama_context: n_ctx = 4096
llama_context: n_ctx = 4096 (padded)
init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 40, can_shift = 1
init: layer   0: n_embd_k_gqa = 5120, n_embd_v_gqa = 5120, dev = CPU
init: layer   1: n_embd_k_gqa = 5120, n_embd_v_gqa = 5120, dev = CPU
init: layer   2: n_embd_k_gqa = 5120, n_embd_v_gqa = 5120, dev = CPU
init: layer   3: n_embd_k_gqa = 5120, n_embd_v_gqa = 5120, dev = CPU
init: layer   4: n_embd_k_gqa = 5120, n_embd_v_gqa = 5120, dev = CPU
init: layer   5: n_embd_k_gqa = 5120, n_embd_v_gqa = 5120, dev = CUDA0
init: layer   6: n_embd_k_gqa = 5120, n_embd_v_gqa = 5120, dev = CUDA0
init: layer   7: n_embd_k_gqa = 5120, n_embd_v_gqa = 5120, dev = CUDA0
init: layer   8: n_embd_k_gqa = 5120, n_embd_v_gqa = 5120, dev = CUDA0
init: layer   9: n_embd_k_gqa = 5120, n_embd_v_gqa = 5120, dev = CUDA0
init: layer  10: n_embd_k_gqa = 5120, n_embd_v_gqa = 5120, dev = CUDA0
init: layer  11: n_embd_k_gqa = 5120, n_embd_v_gqa = 5120, dev = CUDA0
init: layer  12: n_embd_k_gqa = 5120, n_embd_v_gqa = 5120, dev = CUDA0
init: layer  13: n_embd_k_gqa = 5120, n_embd_v_gqa = 5120, dev = CUDA0
init: layer  14: n_embd_k_gqa = 5120, n_embd_v_gqa = 5120, dev = CUDA0
init: layer  15: n_embd_k_gqa = 5120, n_embd_v_gqa = 5120, dev = CUDA0
init: layer  16: n_embd_k_gqa = 5120, n_embd_v_gqa = 5120, dev = CUDA0
init: layer  17: n_embd_k_gqa = 5120, n_embd_v_gqa = 5120, dev = CUDA0
init: layer  18: n_embd_k_gqa = 5120, n_embd_v_gqa = 5120, dev = CUDA0
init: layer  19: n_embd_k_gqa = 5120, n_embd_v_gqa = 5120, dev = CUDA0
init: layer  20: n_embd_k_gqa = 5120, n_embd_v_gqa = 5120, dev = CUDA0
init: layer  21: n_embd_k_gqa = 5120, n_embd_v_gqa = 5120, dev = CUDA0
init: layer  22: n_embd_k_gqa = 5120, n_embd_v_gqa = 5120, dev = CUDA1
init: layer  23: n_embd_k_gqa = 5120, n_embd_v_gqa = 5120, dev = CUDA1
init: layer  24: n_embd_k_gqa = 5120, n_embd_v_gqa = 5120, dev = CUDA1
init: layer  25: n_embd_k_gqa = 5120, n_embd_v_gqa = 5120, dev = CUDA1
init: layer  26: n_embd_k_gqa = 5120, n_embd_v_gqa = 5120, dev = CUDA1
init: layer  27: n_embd_k_gqa = 5120, n_embd_v_gqa = 5120, dev = CUDA1
init: layer  28: n_embd_k_gqa = 5120, n_embd_v_gqa = 5120, dev = CUDA1
init: layer  29: n_embd_k_gqa = 5120, n_embd_v_gqa = 5120, dev = CUDA1
init: layer  30: n_embd_k_gqa = 5120, n_embd_v_gqa = 5120, dev = CUDA1
init: layer  31: n_embd_k_gqa = 5120, n_embd_v_gqa = 5120, dev = CUDA1
init: layer  32: n_embd_k_gqa = 5120, n_embd_v_gqa = 5120, dev = CUDA1
init: layer  33: n_embd_k_gqa = 5120, n_embd_v_gqa = 5120, dev = CUDA1
init: layer  34: n_embd_k_gqa = 5120, n_embd_v_gqa = 5120, dev = CUDA1
init: layer  35: n_embd_k_gqa = 5120, n_embd_v_gqa = 5120, dev = CUDA1
init: layer  36: n_embd_k_gqa = 5120, n_embd_v_gqa = 5120, dev = CUDA1
init: layer  37: n_embd_k_gqa = 5120, n_embd_v_gqa = 5120, dev = CUDA1
init: layer  38: n_embd_k_gqa = 5120, n_embd_v_gqa = 5120, dev = CUDA1
init: layer  39: n_embd_k_gqa = 5120, n_embd_v_gqa = 5120, dev = CUDA1
init:      CUDA0 KV buffer size =  1360.00 MiB
init:      CUDA1 KV buffer size =  1440.00 MiB
init:        CPU KV buffer size =   400.00 MiB
llama_context: KV self size  = 3200.00 MiB, K (f16): 1600.00 MiB, V (f16): 1600.00 MiB
llama_context: enumerating backends
llama_context: backend_ptrs.size() = 3
llama_context: max_nodes = 65536
llama_context: worst-case: n_tokens = 512, n_seqs = 1, n_outputs = 0
llama_context: reserving graph for n_tokens = 512, n_seqs = 1
llama_context: reserving graph for n_tokens = 1, n_seqs = 1
llama_context: reserving graph for n_tokens = 512, n_seqs = 1
llama_context:      CUDA0 compute buffer size =   447.19 MiB
llama_context:      CUDA1 compute buffer size =   368.00 MiB
llama_context:  CUDA_Host compute buffer size =    28.01 MiB
llama_context: graph nodes  = 1366
llama_context: graph splits = 60 (with bs=512), 4 (with bs=1)
CUDA : ARCHS = 860 | USE_GRAPHS = 1 | PEER_MAX_BATCH_SIZE = 128 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX_VNNI = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | BMI2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
Model metadata: {'tokenizer.ggml.add_eos_token': 'false', 'tokenizer.ggml.padding_token_id': '0', 'tokenizer.ggml.unknown_token_id': '0', 'tokenizer.ggml.eos_token_id': '2', 'general.architecture': 'llama', 'llama.context_length': '4096', 'general.name': 'LLaMA v2', 'tokenizer.ggml.add_bos_token': 'true', 'llama.embedding_length': '5120', 'llama.feed_forward_length': '13824', 'llama.attention.layer_norm_rms_epsilon': '0.000010', 'llama.rope.dimension_count': '128', 'llama.attention.head_count': '40', 'tokenizer.ggml.bos_token_id': '1', 'llama.block_count': '40', 'llama.attention.head_count_kv': '40', 'general.quantization_version': '2', 'tokenizer.ggml.model': 'llama', 'general.file_type': '17'}
Using fallback chat format: llama-2
Traceback (most recent call last):
  File "/home/statiksmoke8/GodCore/backend/MIS_handler.py", line 125, in <module>
    parser = argparse.ArgumentParser()
NameError: name 'argparse' is not defined
